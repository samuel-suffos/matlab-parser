/* 
 * [The BSD 3-Clause License]
 * Copyright (c) 2015, Samuel Suffos
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list 
 *    of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this 
 *    list of conditions and the following disclaimer in the documentation and/or other 
 *    materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its contributors may be 
 *    used to endorse or promote products derived from this software without specific 
 *    prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 *
 */

using Matlab.Info;
using Matlab.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Matlab.Nodes
{
    public static class NodeToXmlBuilder
    {
        #region STATIC METHODS:

        #region MAIN METHODS:

        public static XDocument Build(MNode node)
        {
            Checker.CheckNotNull(node);

            return NodeToXmlBuilder.BuildDocument(node);
        }

        #endregion

        #region BUILDER METHODS:

        private static XDocument BuildDocument(IMNode node)
        {
            Checker.CheckNotNull(node);

            XElement root = NodeToXmlBuilder.BuildElement(node);

            XDocument document = new XDocument(
                new XDeclaration("1.0", "utf-8", "yes"),
                new XComment(string.Format("Generated by {0} (version {1})", Information.MatlabParser, Information.Version)),
                new XComment(Information.Copyright),
                new XComment(Information.AllRightsReserved),
                root
            );

            return document;
        }

        private static XElement BuildElement(IMNode node)
        {
            Type nodeType = node.GetType();

            string nodeName = nodeType.Name.EndsWith("Node") ? nodeType.Name.Substring(0, nodeType.Name.Length - 4) : nodeType.Name;

            XElement root = new XElement(nodeName);

            IEnumerable<PropertyInfo> informationProperties = from property in nodeType.GetProperties(BindingFlags.Instance | BindingFlags.Public)
                                                              where property.IsDefined(typeof(InformationAttribute), true)
                                                              let index = ((InformationAttribute)property.GetCustomAttributes(typeof(InformationAttribute), true).First()).Index
                                                              orderby index, property.Name
                                                              select property;

            IEnumerable<XAttribute> attributes = from property in informationProperties
                                                 let value = property.GetValue(node)
                                                 where value != null
                                                 select new XAttribute(property.Name, value);

            root.Add(attributes);

            IEnumerable<PropertyInfo> structureProperties = from property in nodeType.GetProperties(BindingFlags.Instance | BindingFlags.Public)
                                                            where property.IsDefined(typeof(StructureAttribute), true)
                                                            let index = ((StructureAttribute)property.GetCustomAttributes(typeof(StructureAttribute), true).First()).Index
                                                            orderby index, property.Name
                                                            select property;

            List<XElement> elements = new List<XElement>();

            foreach (PropertyInfo structureProperty in structureProperties)
            {
                object propertyValue = structureProperty.GetValue(node);

                if (propertyValue != null)
                {
                    bool modified = false;

                    XElement element = new XElement(nodeName + "." + structureProperty.Name);

                    if (propertyValue is IEnumerable<IMNode>)
                    {
                        IEnumerable<IMNode> children = (IEnumerable<IMNode>)propertyValue;

                        if (children.Count() != 0)
                        {
                            foreach (IMNode child in children)
                            {
                                element.Add(NodeToXmlBuilder.BuildElement(child));

                                modified = true;
                            }
                        }
                    }
                    else if (propertyValue is IMNode)
                    {
                        element.Add(NodeToXmlBuilder.BuildElement((IMNode)propertyValue));

                        modified = true;
                    }

                    if (modified)
                    {
                        elements.Add(element);
                    }
                }
            }

            root.Add(elements);

            return root;
        }

        #endregion

        #endregion
    }
}
